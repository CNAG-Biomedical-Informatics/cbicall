#!/usr/bin/env perl
#
#   CBICall: Framework for variant calling of Illumina's NGS data
#
#   Last Modified: Mar/13/2025
#
#   $VERSION 0.0.1
#
#   Copyright (C) 2025 Manuel Rueda - CNAG (manuel.rueda@cnag.eu)
#
#   License: GNU General Public License v3

use strict;
use warnings;
use autodie;
use utf8;
use feature         qw(say);
use Cwd             qw(abs_path);
use Term::ANSIColor qw(:constants);
use JSON::XS;
use FindBin qw($Bin);
use Path::Tiny;
use Time::HiRes qw(time sleep);
use threads;
use threads::shared;
use File::Spec::Functions qw(catdir catfile);
use lib "$Bin/../lib";
use CBICALL::Help;
use CBICALL::Config;
use CBICALL::DNAseq;

#############################################################
#            Variables definition                           #
#############################################################

# Set STDOUT to output UTF-8
binmode STDOUT, ':encoding(UTF-8)';

# CBICall version
my $version = '0.0.1';

# Initialize a few more variables
my $prompt       = 'Info:';
my $spacer       = '*' x 41;
my $arrow        = '=>';
my $cmd          = '';
my $author       = 'Author: Manuel Rueda, PhD';
my $license      = 'License: GNU General Public License v3';
my $cbicall_path = abs_path($0);

# Personalize warn and die functions
$SIG{__WARN__} = sub { warn BOLD YELLOW "Warn: ", @_ };
$SIG{__DIE__}  = sub { die BOLD RED "Error: ", @_ };

# We tell Perl to flush right away STDOUT data
$| = 1;

##############################################################
#                 Code starts here                           #
##############################################################

# Parsing arguments and getting help if needed
my $arg = Help::usage($version);
my $no_emoji = $arg->{noemoji} // 0;    # 0 means emojis enabled by default

# Reading the configuration values from the config file.
# NB: We'll avoid assigning $param->{foo} to vars unless their value changes often
my $param  = Config::read_param_file( $arg->{paramfile} );
my $config = Config::set_config_values($param);

# Add version to $config
$config->{version} = $version;

# Start CBICALL
say BOLD CYAN "$prompt", ( $no_emoji ? "" : " üöÄ" ), " CBICall $version", RESET;
say "$prompt", ( $no_emoji ? "" : " üñ•Ô∏è " ), " CBICall exe: $cbicall_path";
say "$prompt", ( $no_emoji ? "" : " ‚úçÔ∏è " ), " $author";
say "$prompt", ( $no_emoji ? "" : " üìú" ),  " $license\n$prompt";

# Print arguments to stdout
say BOLD YELLOW, "$prompt", ( $no_emoji ? "" : " üîß" ), " ARGUMENTS USED:", RESET;
say WHITE "$prompt --p $arg->{paramfile}" if $arg->{paramfile};
say WHITE "$prompt --t $arg->{threads}"   if $arg->{threads};

# Printing the config values to stdout according to the format below
say WHITE "$prompt";
say BOLD BLUE, "$prompt", ( $no_emoji ? "" : " ‚öôÔ∏è " ), " CONFIGURATION VALUES:", RESET;

$~ = "CONFIG";
my $l_config = '';
foreach $l_config ( sort keys %{$config} ) {
    write;
}

format CONFIG =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_config, $arrow, $config->{$l_config}
.

# Printing the config values to stdout according to the format below
say WHITE "$prompt";
say BOLD GREEN, "$prompt", ( $no_emoji ? "" : " üé¨" ), " CBICALL PARAMETERS:", RESET;

$~ = "PARAMS";
my $l_param = '';
foreach $l_param ( sort keys %{$param} ) {
    write;
}

format PARAMS =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_param, $arrow, $param->{$l_param}
.

# Start CBICall
say $prompt;
say BOLD CYAN, "$prompt", ( $no_emoji ? "" : " üö¶" ), " STARTING CBICALL FUN", RESET;
say RESET "$prompt $spacer";

# Create the working dir
mkdir( $config->{projectdir} );

# Creating a log file in JSON ;-)
write_log( $config, $arg, $param );

# Now submitting the pipeline through a bash script
my $rah_cbicall = {    # Ref anonymous hash to be used w/ the object wes
    projectdir      => $config->{projectdir},
    pipeline        => $param->{pipeline},
    mode            => $param->{mode},
    sample          => $param->{sample},
    workflow_engine => $param->{workflow_engine},
    gatk_version    => $param->{gatk_version},
    threads         => $arg->{threads},
    id              => $config->{id},
    debug           => $arg->{debug},
    bash_mit_cohort => $config->{bash_mit_cohort},
    bash_mit_single => $config->{bash_mit_single},
    bash_wes_cohort => $config->{bash_wes_cohort},
    bash_wes_single => $config->{bash_wes_single},
    bash_wgs_single => $config->{bash_wgs_single},
    smk_mit_cohort  => $config->{smk_mit_cohort},
    smk_mit_single  => $config->{smk_mit_single},
    smk_wes_cohort  => $config->{smk_wes_cohort},
    smk_wes_single  => $config->{smk_wes_single},
    smk_wgs_single  => $config->{smk_wgs_single}

};
say "$prompt Running ",
  join( '->', $param->{workflow_engine}, $param->{pipeline}, $param->{mode} ),
  ' workflow ', ( $no_emoji ? "" : "üß¨ " ),  '...';

my $wes = DNAseq->new($rah_cbicall);
run_with_spinner(
    sub {
        $wes->variant_calling();
    }
);

# END CBICALL
say "$prompt $spacer";
say BOLD GREEN, "$prompt", ( $no_emoji ? "" : " ‚úÖ" ), " CBICALL FINISHED OK", RESET;

# Optional message
say "$prompt Date: ",            scalar localtime if $arg->{verbose};
say "$prompt Running time(s): ", time - $^T       if $arg->{verbose};

# Say goodbye message
my $goodbye = GoodBye->new();
say WHITE, $prompt, ( $no_emoji ? "" : " üëã " ), $goodbye->say_goodbye();


##############################################################
#                   Code ends here                           #
##############################################################

sub write_log {
    my ( $config, $arg, $param ) = @_;

    my $file  = catfile( $config->{projectdir}, 'log.json' );
    my $coder = JSON::XS->new->utf8->canonical->pretty;
    my $json  = $coder->encode(
        {
            arg    => $arg,
            config => $config,
            param  => $param,
        }
    );
    path($file)->spew($json);

}

# Function that runs a code reference with a spinner.
sub run_with_spinner {
    my $code_ref = shift;

    # Run code directly if not interactive.
    return $code_ref->() unless -t STDOUT;

    my $done : shared = 0;
    my $spinner_thread = threads->create(
        sub {
            my @spinner = qw(‚†ã ‚†ô ‚†π ‚†∏ ‚†º ‚†¥ ‚†¶ ‚†ß ‚†á ‚†è);
            my $i       = 0;
            my $start   = time();
            my $delay   = 1;
            while ( !$done ) {
                my $spinner_char =
                    BOLD
                  . YELLOW
                  . $prompt . ' '
                  . $spinner[ $i % @spinner ]
                  . RESET;
                my $elapsed = time() - $start;
                my $seconds = int( $elapsed % 60 );
                my $minutes = int( ( $elapsed / 60 ) % 60 );
                my $hours   = int( $elapsed / 3600 );
                my $elapsed_str =
                  sprintf( "%02dh %02dm %02ds", $hours, $minutes, $seconds );
                my $message =
                    BOLD
                  . WHITE
                  . " Please be patient - this job may take hours"
                  . ( $no_emoji ? "" : " ‚è≥" )
                  . " (elapsed: $elapsed_str)..."
                  . RESET;
                print "\r$spinner_char$message";
                $i++;
                sleep $delay;
            }

            # Clear the spinner line using ANSI escape sequence without adding a newline.
            print "\r\e[2K";
        }
    );

    my $result;
    my $error;
    {
        local $@;
        eval {
            $result = $code_ref->();
            1;
        } or $error = $@;
    }

    # Signal spinner to stop and join its thread.
    $done = 1;
    $spinner_thread->join();

    # Rethrow any error so it appears cleanly.
    die $error if $error;

    return $result;
}

__END__

=head1 NAME

CBICall: CNAG Biomedical Informatics Framework for Variant Calling on Illumina DNA-seq (germline) NGS Data.

=head1 SYNOPSIS

   cbicall -p <parameters_file.yaml> -t <n_threads> [options]

   Arguments:
     -p|param          Parameters input file (YAML)
     -t|threads        Number of CPUs/Cores/Threads

   Options:
     -debug            Debugging level (from 1 to 5; 5 is maximum verbosity)
     -h|help           Brief help message
     -man              Full documentation
     -v                Show version information
     -verbose          Enable verbose output
     -nc|no-color      Do not print colors to STDOUT
     -ne|no-emoji      Do not print emojis to STDOUT

=head1 SUMMARY

CBICall (B<C>NAG B<B>iomedical B<I>nformatics framework for variant B<Call>ing) is a computational pipeline designed for variant calling analysis using Illumina Next-Generation Sequencing (NGS) data.

=head1 INSTALLATION

=head2 From GitHub

Clone the repository:

  git clone https://github.com/mrueda/cbicall.git
  cd cbicall

Install C<cpanminus> (analog to Python's C<pip>) and GNU compilers:

  sudo apt install cpanminus gcc

Note: If you don't have C<sudo> privileges:

  curl -L https://cpanmin.us | perl - App::cpanminus -l ~/perl5

Then the C<cpanm> exe will be at C<~/perl5/bin/cpanm> or similar.

We will install the dependencies at C<~/perl5>:

  cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)
  cpanm --notest --installdeps .

To ensure Perl recognizes your local modules every time you start a new terminal, you should type:

  echo 'eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)' >> ~/.bashrc

If only need to update do:

  git pull

Optional, peform tests:

  prove -l

Install dependencies for Python 3:

  pip3 install -r requirements.txt

Finally, navigate to a directory where you want the databases stored and execute:

  python3 $path_to_cbicall/scripts/01_download_external_data.py  # Replace $path_to_cbicall with your CBICall installation path.

Note: Google Drive can be a tad restrictive with the download. If you get an error, please use the error URL link in a browser and you should be able to retrieve it there.

Once downloaded, perform a checksum to make sure the files were not corrupted:

  md5sum -c data.tar.gz.md5

Now let's reassemble the split files into the original tar archive:

  cat data.tar.gz.part-?? > data.tar.gz

Clean up split files to save space (when you think you are ready!):

  rm data.tar.gz.part-??

Extract the tar archive:

  tar -xzvf data.tar.gz

Finally, in the C<cbicall> repo: 

Change C<DATADIR> variable in C<workflows/bash/parameters.sh> and C<workflows/snakemake/config.yaml> so that it matches the location of your downloaded data.

Ok, finally we are going to install C<Java 8> in case you don't have it already:

  sudo apt install openjdk-8-jdk

=head1 HOW TO RUN CBICALL

CBICall execution requires:

=over

=item Input Files

A folder containing Paired-End FASTQ files (e.g., C<MA00001_exome/MA0000101P_ex/*{R1,R2}*fastq.gz>).

You have a C<examples/input/> directory with input data that you can use for testing.

=item Parameters File

A YAML-formatted parameters file controlling pipeline execution.

=back

Below are the parameters that can be customized, along with their default values. Parameters must be separated from their values by whitespace or tabs.

=head2 Essential Parameters

  mode:            single  
  pipeline:        wes          
  sample:          undef        
  workflow_engine:   bash
  gatk_version:      gatk3.5

=head2 Optional Parameters (Currently Unused)

  organism:        Homo Sapiens        
  technology:      Illumina HiSeq      

CBICall will create a dedicated project directory (C<cbicall_*>) to store analysis outputs. This design allows multiple independent runs concurrently without modifying original input files.

Below is a detailed description of key parameters:

=over

=item B<mode>

Two modes are supported: C<single> (default, for individual samples) and C<cohort> (for family-based or small cohort analyses).

=item B<pipeline>

Specifies the analysis pipeline. Currently available options: C<wes> (whole-exome sequencing) and C<mit> (mitochondrial DNA analysis). Note: to run C<cohort> analysis, first complete a C<single> analysis for each sample.

=item B<sample>

Path (relative or absolute) to the directory containing FASTQ files for analysis. See the C<examples> directory for detailed guidance.

Example:

examples/input/CNAG999_exome/CNAG99901P_ex

=item B<workflow_engine>

Supported workflow engines: C<bash> or C<snakemake>.

=item B<gatk_version>

Supported values: C<gatk3.5> or C<gatk4.6>.

=back

=head2 Example Commands

  $ bin/cbicall -p param_file.yaml -t 8
  $ bin/cbicall -p param_file.yaml -t 4 -verbose
  $ bin/cbicall -p param_file.yaml -t 16 > log 2>&1
  $ $path_to_cbicall/bin/cbicall -p param_file.yaml -t 8 -debug 5

Note: For Trio analyses, unique (de novo) variant rates for probands typically should be ~1%, and ~10% for parents. Significant deviations may indicate issues.

=head2 ADDENDUM: Nomenclature Guidelines

All parts must follow a strict character count, and everything after the underscore is mandatory.

=head2 Directory Naming

=over

=item * Format: C<[ProjectCode]_[SampleType]>

=over 4

=item - C<ProjectCode>: Exactly 7 characters [a-zA-Z0-9] (e.g., C<MA99999>)

=item - C<SampleType>: Must be C<exome> (5 characters)

=back

Example:

    MA99999_exome

Total: 7 + 1 + 5 = 13 characters.

=back

=head2 Subdirectory Naming

=over

=item * Format: C<[ProjectCode][SampleID][Role]_[SampleTypeShort]>

=over 4

=item - C<ProjectCode>: 7 characters ([a-zA-Z0-9] e.g., C<MA99999>)

=item - C<SampleID>: 2 characters (e.g., C<01>)

=item - C<Role>: 1 character (e.g., C<P> for Proband, C<F> for Father, C<M> for Mother)

=item - C<SampleTypeShort>: Must be C<ex> (2 characters)

=back

Example:

    MA9999901F_ex

Total: 7 + 2 + 1 + 1 + 2 = 13 characters (excluding any file extension).

=back

=head2 FASTQ Naming Convention

This convention is adapted from the following document:

L<Document|https://support.illumina.com/help/BaseSpace_Sequence_Hub_OLH_009008_2/Source/Informatics/BS/NamingConvention_FASTQ-files-swBS.htm>

We have added a custom suffix to indicate sequencing type:

 - _ex for exome sequencing
 - _wg for whole genome sequencing

Example:

  MA0004701P_ex_S5_L001_R1_001.fastq.gz

In summary, you need to have something like this:

  MA00001_exome/MA0000101P_ex/MA0000101P_ex_S1_L001_R?_001.fastq.gz

=head1 SYSTEM REQUIREMENTS

CBICall is optimized for multi-core Linux desktop, workstation, or server environments. Snakemake-based workflows can also be adapted for HPC clusters.

Recommended specifications:

  * Works in amd64 and arm64 archs (M-based Macs).
  * Ideally a Debian-based distribution (Ubuntu or Mint), but any other (e.g., CentOS, OpenSUSE) should do as well (untested).
  * >= 8 GB RAM.
  * >= 4 CPU cores (Intel i7 or Xeon preferred).
  * >= 250 GB HDD space.
  * Perl >= 5.26 and required CPAN modules (install via C<cpanm --notest --installdeps .>).
  * Java 8 (install via C<sudo apt install openjdk-8-jdk>).
  * Snakemake (install via C<pip3 install -r requirements.txt>).

Perl scripts in CBICall have minimal RAM usage (~2% of 16 GB system). However, genome mapping tasks benefit significantly from higher memory availability. GATK and Picard default to 8 GB RAM allocations, configurable by users as needed.

Parallel execution is supported but does not scale linearly. Optimal performance is achieved using ~ 4 threads per task. For example, with 12 cores, running 3 tasks in parallel with 4 cores each is typically more efficient than one task with all 12 cores. See example in figure below:

=begin markdown

![Time](https://github.com/mrueda/cbicall/blob/main/docs/img/run-time.png)

=end markdown

Unit/integration tests are conducted manually by verifying CSV and VCF outputs against established test datasets.

=head1 SUPPORTED PIPELINES

The following table shows valid pipeline and mode combinations for each GATK version:

| GATK Version | wes_single | wes_cohort | mit_single | mit_cohort | wgs_single |
|--------------|------------|------------|------------|------------|------------|
| gatk3.5      | +          | +          | +          | +          | -          |
| gatk4.6      | +          | -          | -          | -          | +          |

Date: May-2025

=head2 Capture Kits

* For GATK version 3.5: Exome capture is based on Agilent SureSelect.

* For GATK version 4.6: Exome and WGS reference is based on the GATK bundle (b37).

=head1 COMMON ERRORS AND TROUBLESHOOTING

=over

=item * GATK Errors (wes_single.sh or wes_cohort.sh)

=over

=item Error: C<NaN LOD value assigned> in recalibration steps.

Occurs due to insufficient INDEL variants (typically fewer than 8000) for negative model training. The default threshold is 8000.

Solution: Increase minimum INDEL count (e.g., to >8000) in relevant pipeline scripts. Only rerun failed samples.

=item Error: C<there aren't enough columns for line ... dbsnp_137.hg19.vcf>

Solution: Remove the problematic line from the VCF file and document changes in a README file.

=back

=item * B<MTOOLBOX Errors>

- Failure related to unsupported N_CIGAR:  
  Add flag C<--filter_reads_with_N_cigar> in Mtoolbox.sh (line ~386).

- Samples with coverage below ~10x yield unreliable heteroplasmy fractions (HF). Extremely low coverage (<10x) can render HFs meaningless, despite generally consistent results across widely varying coverage levels.

=back


=head1 CITATION

To be determined.


=head1 AUTHOR

Written by Manuel Rueda (mrueda). GitHub repository: L<https://github.com/mrueda/cbicall>. CBICall takes ideas from ScrippsCall, developed while at L<SRTI|https://www.scripps.edu/science-and-medicine/translational-institute/> (Scripps Research Translational Institute) during 2015-2017.

=head1 COPYRIGHT AND LICENSE

Please see the included LICENSE file for distribution and usage terms.

=cut
